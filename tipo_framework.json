{
    "swagger": "2.0",
    "info": {
        "version": "2016-05-07T09:08:29Z",
        "title": "tipo-framework-api",
        "description": "## Summary ##\n##### Tipo framewok goals are to develop web applications rapidly without compromising flexibility to evolve both UI layer and the middleware layer. Tipo framework offers a generic create/update handler for any tipo object based on metadata.#####\n\n  ##### Framework takes advantage of no_sql database and at the same time have the ability to be able to translate to relational at a later stage for complex reporting #####\n  \n  \nSome of the API calls here are dedicated to fetch tipo meta data and other APIs deal with the actual tipo data. Lets explore what makes up a tipo.\n  \n![TIpo Structure](http://127.0.0.1:8080/TipoStructure.v0.png \"Tipo Structure\")\n\nA general note about services capabilities:\n\n  * Capable of handling array of data for either a single tipo or differnt types of tipos. Depending on the tipo_meta in each tipo the service will workout what type of data and act accordingly.\n  \n  * These APIs can be used in web UI, and also for large data uploads. (Initial implementations might not be fully tuned for large batch uploads.)\n  \n  * Each tipo consists of **meta data in tipo_meta ** and array of actual data in an array for that tipo. In a situation where multiple tipo types are to be handled within the same API call, multiple tipo arrays to be populated with each tipo containing its meta data and actual data.\n    \n  * Operation has tipo name and version derived from the parameters in each operation, used in the tipo gateway to decide which function to execute. Hence it is mandatory for the client to send the parameters. This is important to support functionality where a tipo is registered purely to execute a custom function without any need for normal CRUD.\n  \n### Tipo Metadata - Explained ###\nTipo metadata is very similar to Swagger definitions with a lot of extensions. However the framework doesn't complete take Swagger as the bassis in order to grow without any direct dependecies on other frameworks. Nevertheless it is quite easy to generate a swagger defintion using tipo metadata. Swagger goals are for documentation, Tipo goals are rapid web application development. Hence introducing a direct dependency will result in unforeseen complexities at a later stage. \n\n### Tipo_Definition Key Fields ###\n\n  | Field Name  | Description | \n  | ----------  | ----------- | \n  | **`TipoName*`** | Tipo name ** E.g. PurchaseOrder, Person **|\n  | **`Version*`** | Tipo version, only major versions to be included here. Any minor versions should be backward compatible and should not require a separate definition **E.g. 1** |\n  | **`Type`**  | Defines a high level behaviour for the tipo. Currently supported types are `Cached` -  Server will cache the tipo in AWS elastic cache **Default: ** *`Empty`* | \n  | **`TipoListView`** | AngularJS directive that controls how a list of tipos are displayed. By default this will show small table for each element with fields where ShortDisplay is true. None of the child tipos are shown in this view. E.g Purchase Order details without line-items is shown. ** Default: ** *`DefaultTipoListView`*|\n  | **`TipoDetailView`**  | Controls how a complete Tipo is displayed. All the child tiops is displayed. Respect group field to group some of the fields into a separate section. ** Default: ** *`DefaultTipoDetailView`* |\n  | **`TipoEditView`**  | High level form layout to capture data. ** Default: ** *`DefaultTipoEditView`*|\n  | **`MainMenu`** | Should this tipo be included in the main menu? Boolean Yes/No. ** Default: ** `No`\n  | ** `*` ** | Denotes mandatory |\n  \n  \n  #### Tipo_Field_Definition ####\n  | Name  | Description | \n  | ----------  | ----------- | \n  | **`TipoName*`** | Tipo name ** E.g. PurchaseOrder, Person **|\n  | **`FieldName*`** | Tipo field name ** E.g. FirstName, LastName **|\n  | **`FieldType*`** | Can be a primitive or another tipo. Primitives: integer, float, double, string, boolean, date(ISO3339), date_time(ISO3339). In case of another tipo type, it can be simply reference to a field in another tipo or a whole tipo itself. This is explained further below. |\n  |**`TipoArray`**  | Takes a boolean value. Represents if this field repeats. In case of relationship to another tipo, this will indicate if the relationship is one-2-many or one-2-one.\n  \n  \n  ##### FieldType #####\n  \n  Apart from taking the primitive types, a relationship to another tipo is represented here. When it comes to relationship, first decision is if it is aggregation or composition. \n    \n  * If it is `composition`, then this field will point to the object. A perfect example is **PurchaseOrder** and **POLineItem**. When defining PurchaseOrder metadata, a field POLineItem with field type `Tipo.POLineItem.v1` indidates that POLineItem will be embedded in PurchaseOrder tipo and if the `TipoArray` is true, the line item will repeat.\n  * If the relationship is `aggregation`, the FieldType will point to the ID of the target tipo. For example, thePurchaseOrder relationship with Customer. \n  \n  Both relationship types are demonstrated in the example below.\n  \n    \"tipo\":\n      {\n        \"tipo_meta\": {\n          \"tipo_name\": \"PurchaseOrder\",\n          \"tipo_version\": \"1\",\n          \"tipo_type\": \"cached\"\n        },\n        \"tipo_fields\": [\n          {\n            \"field_name\": \"OrderID\",\n            \"field_type\": \"integer\",\n            \"field_description\": \"Unique order number\",\n            \"primary_key\": true,\n            \"display_name\": \"Order Number\",\n            \"display_type\": \"KeyHighlight\",\n            \"desplay_type\": \"ngKeyField\",\n            \"data_section\": \"Basic\",\n            \"short_display\": true,\n            \"sample_value\": \"1001\",\n            \"input_type\": \"AutoGenerated\",\n            \"mandatory\": true\n          },\n          {\n            \"field_name\": \"OrderAmount\",\n            \"field_type\": \"double\",\n            \"field_description\": \"Total order amount\",\n            \"display_name\": \"Order Total\",\n            \"display_type\": \"ngCurrency\",\n            \"data_section\": \"Basic\",\n            \"short_display\": true,\n            \"input_type\": \"AutoGenerated\",\n            \"input_validator\": \"some_javaScript?\",\n            \"mandatory\": true\n          },\n          {\n            \"field_name\": \"RequiredByDate\",\n            \"field_type\": \"date_time\",\n            \"field_description\": \"When this order must be full-filled by \",\n            \"display_name\": \"Required by date\",\n            \"display_type\": \"ngDate\",\n            \"data_section\": \"Basic\",\n            \"short_display\": true,\n            \"input_type\": \"ngDate\",\n            \"input_validator\": \"some_javaScript?\"\n          },\n          {\n            \"field_name\": \"CustomerName\",\n            \"field_type\": \"Tipo.Customer.v1.CustomerName\",\n            \"field_description\": \"Customer Name, however in the database both ID and Name will be saved {\\\"Customer ID\\\", \\\"Customer Name\\\"}. This is how aggregation relationship works with Tipos\",\n            \"secondary_index\": true,\n            \"field_validator\": \"some_javaScript?\",\n            \"display_name\": \"Customer Name\",\n            \"data_section\": \"Basic\",\n            \"short_display\": true,\n            \"sample_value\": \"Colins Foods\",\n            \"input_type\": \"ngIDName - A means to select Name and store both ID and Name\",\n            \"input_validator\": \"some_javaScript?\",\n            \"mandatory\": true\n          },\n          {\n            \"field_name\": \"LineItem\",\n            \"field_type\": \"Tipo.POLineItem.v1\",\n            \"field_description\": \"An array of line items included in the purchase order. In this case the field type will refer to LineItem object, not a single field - unlike in the customer case.\",\n            \"tipo_array\": true,\n            \"display_name\": \"LineItem\",\n            \"data_section\": \"LineItem\"\n          }\n        ]\n      }\n  \n\n    \n  "
    },
    "host": "yourhost.execute-api.us-east-1.amazonaws.com",
    "basePath": "/dev",
    "schemes": [
        "https"
    ],
    "paths": {
        "/tipo/{tipo_name}/{tipo_version}/{id}": {
            "put": {
                "description": "\n* Create, update or patch given tipos and return all the generated IDs including main tipo and nested child tipos.\n  \n  \n* If a field is supplied with no value, clear the value from the database\n  \n  \n* Fields not supplied will not be altered.\n\n  *For example, when a person **middle name** is supplied and is **different** to the database value, then **middle name** is updated. If the **last name** has changed and **no middle name** field is supplied, **simply do not change the contents of middle name**.*\n\n  ## Request ##\n  Tipo request, takes an array of **tipo_data** . However in most cases,\n    only **one tipo_data** is expected. \n    \n    The **tipo_name/tipo_version** in\n    the parameters will be same as **tipos/tipo_meta/tipo_name**. *[Except,\n    if there is a tipo that processes multiple tipos of different type,\n    the tipo name that in the parameters will be different from the one\n    in the body.]*\n    \n    Client is expected to populate the array of **tipo_data**\n    for each topo object.\n    \n    Client is not expected to populate **tipo_meta**\n    section, this will be populated by the server side components.\n    \n    \n  ## Response ##\n  abc",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tipo_name",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tipo_version",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "description": "a",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "tipo_action",
                        "description": "To execute an action registered against the TIPO. If not supplied, either GET, PUT or DELETE will be executed.",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "--",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tipo_request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 response.",
                        "schema": {
                            "$ref": "#/definitions/tipo_response"
                        },
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "400 response",
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "401 response",
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "404 response",
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    },
                    "409": {
                        "description": "409 response",
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "get": {
                "description": "Request RESTful service to retrieve a tipo for a specific version. As expected, there is no body and the behavour is controlled by passing the appropriate parameters as described below.\n\n  The operation will return requested tipo data, after applying the conditions supplied in the parameters, and return both metadata and the actual data in response.\n  \n  ",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tipo_name",
                        "description": "E.g. Person, Order",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tipo_version",
                        "description": "E.g. 1, 2",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "description": "at",
                        "in": "path",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "tipo_action",
                        "description": "E.g. ProcessComplexOrder",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "page",
                        "description": "page number, for pagenation support",
                        "in": "query",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "per_page",
                        "description": "Number of records in a page",
                        "in": "query",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "compression",
                        "description": "Compression E.g. gzip",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "tipo_filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "where clause to apply filter"
                    },
                    {
                        "name": "tipo_fields",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "select the list of fields to be included for the requested tipo"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "200 response",
                        "schema": {
                            "$ref": "#/definitions/tipo_response"
                        },
                        "headers": {
                            "Access-Control-Allow-Origin": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/tipo_meta/": {
            "get": {
                "tags": [
                    "meta"
                ],
                "summary": "Fetch all tipos with high level definitions, without field data.",
                "description": "Returns meta_data for all the tipos in the system that user has access to.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/tipo_meta_head"
                        }
                    },
                    "400": {
                        "description": "Invalid data requested"
                    },
                    "404": {
                        "description": "No tipos found in the system"
                    }
                }
            }
        },
        "/tipo_meta/{tipo_name}/{tipo_version}": {
            "get": {
                "tags": [
                    "meta"
                ],
                "summary": "Fetch all metadata for requested tipo.",
                "description": "Returns all meta_data including fields for the requested tipo.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tipo_name",
                        "description": "E.g. Person, Order",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "tipo_version",
                        "description": "E.g. 1, 2",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/tipo_meta_detail"
                        }
                    },
                    "400": {
                        "description": "Invalid data requested"
                    },
                    "404": {
                        "description": "No tipos found in the system"
                    }
                }
            }
        }
    },
    "definitions": {
        "tipo_meta_head": {
            "type": "object",
            "properties": {
                "tipos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/_tipo_meta_def"
                    }
                }
            }
        },
        "tipo_meta_detail": {
            "type": "object",
            "properties": {
                "tipo": {
                    "type": "object",
                    "properties": {
                        "tipo_meta": {
                            "$ref": "#/definitions/_tipo_meta_def"
                        },
                        "tipo_fields": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/_tipo_field_def"
                            }
                        }
                    }
                }
            }
        },
        "tipo_request": {
            "type": "object",
            "properties": {
                "tipos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/_tipo_def"
                    }
                }
            }
        },
        "tipo_response": {
            "type": "object",
            "properties": {
                "status_code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "tipos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/_tipo_def"
                    }
                }
            }
        },
        "_tipo_def": {
            "type": "object",
            "properties": {
                "tipo_meta": {
                    "$ref": "#/definitions/_tipo_meta_def"
                },
                "tipo_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/_tipo_data_def"
                    }
                }
            }
        },
        "_tipo_meta_def": {
            "type": "object",
            "properties": {
                "tipo_name": {
                    "type": "string",
                    "description": "Eg. Person, Pipeline"
                },
                "tipo_version": {
                    "type": "string",
                    "description": "Version of tipo, only major version"
                },
                "tipo_type": {
                    "type": "string",
                    "description": "cached"
                },
                "tp_list_view": {
                    "type": "string"
                },
                "tp_view": {
                    "type": "string"
                },
                "tp_edit": {
                    "type": "string"
                },
                "tipo_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/_tipo_field_def"
                    }
                }
            }
        },
        "_tipo_field_def": {
            "type": "object",
            "properties": {
                "field_name": {
                    "type": "string"
                },
                "field_type": {
                    "type": "string"
                },
                "field_description": {
                    "type": "string"
                },
                "primary_key": {
                    "type": "boolean"
                },
                "secondary_index": {
                    "type": "boolean"
                },
                "tipo_array": {
                    "type": "boolean"
                },
                "field_validator": {
                    "type": "string"
                },
                "tipo_hidden": {
                    "type": "boolean"
                },
                "display_name": {
                    "type": "string"
                },
                "display_type": {
                    "type": "string"
                },
                "data_section": {
                    "type": "string"
                },
                "short_display": {
                    "type": "boolean"
                },
                "sample_value": {
                    "type": "string"
                },
                "tooltip": {
                    "type": "string"
                },
                "input_type": {
                    "type": "string"
                },
                "input_validator": {
                    "type": "string"
                },
                "mandatory": {
                    "type": "boolean"
                },
                "create_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When it was created in the ISO8601 format, YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)"
                },
                "created_by": {
                    "type": "string",
                    "description": "Created User ID"
                },
                "update_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "When it was updated in the ISO8601 format, YYYY-MM-DDThh:mm:ss.sTZD (eg 1997-07-16T19:20:30.45+01:00)"
                },
                "updated_by": {
                    "type": "string",
                    "description": "Updated User ID"
                }
            }
        },
        "_tipo_data_def": {
            "type": "object"
        }
    }
}